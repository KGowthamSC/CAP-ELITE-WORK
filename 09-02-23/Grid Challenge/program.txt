import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'gridChallenge' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts STRING_ARRAY grid as parameter.
     */

    public static String gridChallenge(List<String> grid) {
            List<String> a1=new ArrayList<>();
            List<Character> a2=new ArrayList<>();
            for (int i=0;i<grid.size();i++){
                String w1=grid.get(i);
                for (int j=0;j<w1.length();j++){
                    a2.add(w1.charAt(j));
                }
                Collections.sort(a2);
                String ne="";
                for (int k=0;k<a2.size();k++){
                    ne=ne+a2.get(k);
                }
                a1.add(ne);
                a2.clear();
            }
            List<String> n1=new ArrayList<>(a1);
            List<Character> n2=new ArrayList<>();
            int count=0;
            String q1=a1.get(0);
            for (int i=0;i<q1.length();i++){
                for(int j=0;j<n1.size();j++){
                    String w1=n1.get(j);
                    n2.add(w1.charAt(i));
                }
                List<Character> u1=new ArrayList<>(n2);
                Collections.sort(n2);
                if (n2.equals(u1)){
                    count=count+1;
                }
                n2.clear();
            }
            if (count==q1.length()){
                return "YES";
            }
            else{
                return "NO";
            }
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, t).forEach(tItr -> {
            try {
                int n = Integer.parseInt(bufferedReader.readLine().trim());

                List<String> grid = IntStream.range(0, n).mapToObj(i -> {
                    try {
                        return bufferedReader.readLine();
                    } catch (IOException ex) {
                        throw new RuntimeException(ex);
                    }
                })
                    .collect(toList());

                String result = Result.gridChallenge(grid);

                bufferedWriter.write(result);
                bufferedWriter.newLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
