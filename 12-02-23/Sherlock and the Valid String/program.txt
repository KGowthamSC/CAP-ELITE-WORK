import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'isValid' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts STRING s as parameter.
     */

    public static String isValid(String s) {
        HashMap<Character,Integer> a1=new HashMap<>();
        for (int i=0;i<s.length();i++){
            a1.put(s.charAt(i),a1.getOrDefault(s.charAt(i),0)+1);
        }
        List<Integer> n1=new ArrayList<>();
        for (Map.Entry<Character,Integer> m:a1.entrySet()){
            n1.add(m.getValue());
        }
        int su=0;
        int m1=Collections.min(n1);
        for (int i=0;i<n1.size();i++){
            if (n1.get(i)==m1){
                continue;
            }
            else{
                su=su+(n1.get(i)-m1);
            }
        }
        int su1=-1;
        int m2=Collections.max(n1);
        for (int i=0;i<n1.size();i++){
            if (n1.get(i)==m2){
                continue;
            }
            else if (n1.get(i)-1==0 && n1.get(1)==m2){
                su1=su1+1;
            }
        }
        if ((su>1) && (su1!=0)){
            return "NO";
        }
        else{
            return "YES";
        }
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String s = bufferedReader.readLine();

        String result = Result.isValid(s);

        bufferedWriter.write(result);
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
